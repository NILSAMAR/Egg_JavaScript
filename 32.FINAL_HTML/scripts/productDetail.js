/*-----------------------------------------------------------------------
34.2  ‚úèÔ∏è Actividad: Capturar el id del producto */
/*-----------------------------------------------------------------------*/
/**
üíß1.Desde Visual Studio Code, abre la carpeta store y luego el archivo details.html. ‚úÖ
üíß2.Quita el input de b√∫squeda de la barra de navegaci√≥n.‚úÖ
üíß3.Conecta el script layout.js y modifica la barra de navegaci√≥n y el pie de p√°gina para que 
se generen din√°micamente. ‚úÖ
üíß4.Conecta el script products.js para tener el array de productos disponible para la vista.‚úÖ
üíß5.Crea el archivo productDetail.js en la carpeta scripts y conectalo con la vista product.html‚úÖ
üíß6.Captura el par√°metro id utilizando las propiedades y m√©todos de la teor√≠a.‚úÖ
üíß7.Imprime por consola el id. A modo de ejemplo: ‚úÖ*/

//Variable que guarda la ubicaci√≥n actual
const query = location.search;
//Variable que instancia la clase URLSearchParams
const params = new URLSearchParams(query);
//Variable que captura el id
const id = params.get("id");
console.log(id);
/*
üíß8.Abre con live server el archivo index.html, prueba el correcto direccionamiento de los links y 
verifica la impresi√≥n por consola del id. */

/*-----------------------------------------------------------------------
34.3  ‚úèÔ∏èActividad: Renderizar din√°micamente la vista de detalle */
/*-----------------------------------------------------------------------*/
/**Para este ejercicio tienes que seguir los siguientes pasos:
üíß1.Desde Visual Studio Code, abre la carpeta store y luego el archivo productDetail.js
üíß2.Define la funci√≥n printDetails para que:
    üåç1.dependa del par√°metro id del detalle del producto
    üåç2.guarde en una variable el producto encontrado con el id del par√°metro
    üåç3.defina una variable para la plantilla de la vista de detalles e interpole con ${} los datos    correspondientes al detalle del producto
    üåç4.seleccione un id del html donde se imprimir√° la plantilla 
    üåç5.actualice la vista con la renderizaci√≥n del detalle
A modo de ejemplo:*/
//pegar todo el contenido de la vista de detalle
//identificar los datos est√°ticos
//interpolarlos con ${}

function printDetails(id) {
  const product = products.find((each) => each.id === id);
  // Plantilla para la vista de detalles
  //El map para los colores lo que hace es array con cada opcion de producto
  const detailsTemplate = `
    <section class="product-images-block">
        <div class="product-images">
          ${product.images.map((images) => `<img class="mini-img" src="${images}" alt="${product.title}" onclick="changeMini(event)" />`).join("")}
        </div>
        <img 
        class="big-img" 
        id="big-img" 
        src="${product.images[0]}" 
        alt="MacBook Pro 13'4" />
      </section>
      <div class="product-description-block">
        <h1 class="product-title">"${product.title}"</h1>
        <form class="product-selector">
          <fieldset class="product-fieldset">

            <label class="product-label" for="color">Color</label>
            <select 
            class="product-select" 
            type="text" placeholder="Selecciona un color" 
            id="color"
            >
              ${product.colors.map(color => `<option value="${color}">${color}</option>`).join('')}
            </select>
          </fieldset>
        </form>
        <div class="product-description">
          <span class="product-label">Descripci√≥n</span>
          <p>
            ${product.description}
          </p>
        </div>
      </div>
      <div class="product-checkout-block">
        <div class="checkout-container">
          <span class="checkout-total-label">Total:</span>
          <h2 id="price" class="checkout-total-price">$${product.price}</h2>
          <p class="checkout-description">
            ${product.taxPolicy}
          </p>
          <ul class="checkout-policy-list">
            <li>
              <span class="policy-icon"><img src="./assets/truck.png" alt="Truck" /></span>
              <span class="policy-desc">Agrega el producto al carrito para conocer los costos de env√≠o</span>
            </li>
            <li>
              <span class="policy-icon"><img src="./assets/plane.png" alt="Plane" /></span>
              <span class="policy-desc">Recib√≠ aproximadamente entre 10 y 15 d√≠as h√°biles, seleccionando env√≠o normal</span>
            </li>
          </ul>
          <div class="checkout-process">
            <div class="top">
              <input type="number" min="1" value="1" onclick="changePrice(event)" />
              <button type="button" class="cart-btn" onclick="saveProduct(${product.id})">
                A√±adir al Carrito
              </button>
            </div>
          </div>
        </div>
      </div>
`;
  const detailsSelector = document.querySelector("#details");
  detailsSelector.innerHTML = detailsTemplate;
}
// Llama a la funci√≥n para renderizar el detalle
printDetails(id);

/*
üíß1.Abre con live server el archivo index.html el archivo index.html, prueba el direccionamiento de los links y 
verifica la correcta renderizaci√≥n de la vista de detalle.
üíß2.Programa y verifica la vista la cantidad de veces que sea necesario para que la vista se renderice correctamente.. */

/*-----------------------------------------------------------------------
34.4  ‚úèÔ∏èActividad: Renderizar din√°micamente el select de color */
/*-----------------------------------------------------------------------*/
/*
En esta actividad, s√≥lo nos enfocaremos en renderizar din√°micamente las opciones del select de 
colores del producto. Para este ejercicio tienes que:
üíß1.Desde Visual Studio Code, abre la carpeta store y luego el archivo productDetail.js
üíß2.Modifica la funci√≥n printDetails para que el select renderice de forma din√°mica las opciones de los colores.
üíß3.Luego de ‚Äúmapear‚Äù, une todos los elementos del array transformado con join() para retornar un √∫nico template. A modo de ejemplo*/

/*-----------------------------------------------------------------------
35.1  ‚úèÔ∏è Actividad: Programar las miniaturas de la vista de detalle */
/*-----------------------------------------------------------------------
üíß1.Desde Visual Studio Code, abre la carpeta store y luego el archivo productDetail.js
üíß2.Modifica la funci√≥n printDetails para que cada imagen de la miniatura tenga asignado un evento de click ‚Äúen l√≠nea‚Äù. Cada click en una miniatura debe ejecutar una funci√≥n que actualice la foto que renderiza la foto agrandada. Utiliza el atributo onclick para que ejecute la funci√≥n changeMini.
üíß3.Define la funci√≥n changeMini para que:
      üåç1. dependa del evento de click
      üåç2.guarde en una variable la ruta de la imagen de la miniatura 
      üåç3.seleccione el id de la imagen agrandada
      üåç4.actualice la vista con la imagen agrandada seleccionada
A modo de ejemplo: */

/*** Definir funci√≥n para cambiar imagen*/
function changeMini(event) {
  //Traer el src de la imagen seleccionada
  const selectedSrc = event.target.src;
  //Traer el selector de la imagen grande
  const bigSelector = document.querySelector("#big-img");
  //Cambiar el src de la imagen grande
  bigSelector.src = selectedSrc;
}
/*
üíß1.Programa y verifica la vista la cantidad de veces que sea necesario para que la vista se renderice y funcione correctamente.
 */
printDetails(id);


/*-----------------------------------------------------------------------
35.2  ‚úèÔ∏è Actividad: Calcular el subtotal a pagar */
/*-----------------------------------------------------------------------
üíß1.Desde Visual Studio Code, abre la carpeta store y luego el archivo productDetail.js
üíß2.Modifica la funci√≥n printDetails para que el input num√©rico de la cantidad tenga asignado un evento de cambio ‚Äúen l√≠nea‚Äù. 
Cada cambio en las unidades a comprar debe ejecutar una funci√≥n que actualice el subtotal a pagar. Utiliza el atributo onchange 
para que ejecute la funci√≥n changeSubtotal. 
üíß3.Define la funci√≥n changeSubtotal para que:
  üåç1.dependa del evento de cambio
    üåç2.guarde en una variable la cantidad de productos a comprar
    üåç3.busque el producto
    üåç4.calcule el subtotal
    üåç5.seleccione la etiqueta donde se renderizar el subtotal
    üåç6.actualice la vista con la imagen agrandada seleccionada
üíß4.Programa y verifica la vista la cantidad de veces que sea necesario para que la vista se renderice y funcione correctamente.*/

/*** Definir funcion para cambiar precio*/
function changePrice(event) {
  //traer la cantidad del input de tipo number
  const quantity = event.target.value;
  //traer el producto
  const product = products.find(product => product.id == id);
  //traer el selector del precio
  const priceSelector = document.querySelector("#price");
  //cambiar el precio total
  priceSelector.innerHTML = `$${quantity * product.price}`;
}

/*-----------------------------------------------------------------------
36.1  ‚úèÔ∏è Actividad: Agregar un producto al carrito
/*-----------------------------------------------------------------------/*
üçÅCada vez que un usuario realiza un click en el bot√≥n ‚Äúa√±adir al carrito‚Äù: el producto junto con las especificaciones 
seleccionadas (como la cantidad y color) se guardan en la base de datos de la aplicaci√≥n. 
üçÅPor el momento no vas a trabajar con bases de datos, pero el localStorage es una buena aproximaci√≥n. Para este ejercicio 
tienes que seguir los siguientes pasos:

üíß1.Desde Visual Studio Code, abre la carpeta egg_js y luego el archivo productDetail.js
üíß2.Modifica la funci√≥n printDetails para que el bot√≥n ‚Äúa√±adir‚Äù tenga asignado un evento de click ‚Äúen l√≠nea‚Äù. 
Cada click del bot√≥n debe ejecutar una funci√≥n que guarde los datos m√°s importantes del producto. 
Utiliza el atributo onclick para que ejecute la funci√≥n saveProduct. A modo de ejemplo:
üíß3.Define la funci√≥n saveProduct para que:
        üåç1. dependa del id del bot√≥n
        üåç2. busque un producto con el id
        üåç3.defina un objeto con las propiedades especificadas en la compra
        üåç4.convierta a JSON el objeto
        üåç5.guarde el objeto en la memoria del navegador

üí°Buscar la forma de capturar todos los datos del producto agregado.
üíß5. Programa y verifica la vista la cantidad de veces que sea necesario para que la vista se renderice y funcione correctamente.*/


/*** Definir funci√≥n para a√±adir al carrito*/
function saveProduct(id) {
  //traer el producto
  const product = products.find(product => product.id == id);
  //defina un objeto con las propiedades especificadas en la compra
  const objectProduct = {
    id: product.id,
    title: product.title,
    price: product.price,
    color: document.querySelector("#color").value,
    image: product.images[0],
    quantity: document.querySelector("input").value,
  };


/*-----------------------------------------------------------------------
36.2  ‚úèÔ∏è Actividad: Agregar un producto al carrito
/*-----------------------------------------------------------------------
üçÅLa funci√≥n saveProduct guarda en la clave cart del localStorage un producto. Cuando quieres agregar otro producto,
la funcionalidad desarrollada ‚Äúsobre-escribe‚Äù la clave cart con el producto recientemente ‚Äúa√±adido‚Äù (borrando los 
datos del producto a√±adido con anterioridad). 
üçÅEs necesario modificar la funci√≥n para que guarde todos los productos. Para este ejercicio tienes que seguir 
los siguientes pasos:

üíß1.Desde Visual Studio Code, abre la carpeta egg_js y luego el archivo productDetail.js
üíß2.Modifica la funci√≥n saveProduct para que adem√°s de lo que ya hac√≠a:
        üåç1. busque y verifique si existe la clave cart en localstorage
        üåç2. si la clave existe debe agregar el nuevo producto al array de productos y guardarlo en el storage
        üåç3. si la clave no existe debe crear un array con el producto y guardarlo en el storage
üíß4.Programa y verifica la vista la cantidad de veces que sea necesario para que la vista se renderice y funcione correctamente.*/

  // Verificar si la clave 'cart' existe en localStorage
  if (localStorage.getItem('cart')) {
    // Si existe, obtener el contenido y convertirlo de nuevo en un array
    let cart = JSON.parse(localStorage.getItem('cart'));
    // Agregar el nuevo producto al array
    cart.push(objectProduct);
    // Guardar el array actualizado en el storage
    localStorage.setItem("cart", JSON.stringify(cart));
  } else {
    // Si no existe, crear un nuevo array con el producto y guardarlo en el storage
    let cart = [objectProduct];
    localStorage.setItem("cart", JSON.stringify(cart));
  }

}

printDetails(id);



  











